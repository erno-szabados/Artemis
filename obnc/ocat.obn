(** ocat.Mod is inspired by ocat command found in Joseph Templ's in Ofront.

Copyright (C) 2021 R. S. Doiel <rsdoiel@gmail.com> This Source Code Form is subject to the terms of the Mozilla PublicLicense, v. 2.0. If a copy of the MPL was not distributed with thisfile, You can obtain one at http://mozilla.org/MPL/2.0/. *)
MODULE ocat;

(** NOTE: OCat is a POSIX command line program. *)
    
IMPORT Args := extArgs, Out, Files, Texts := artTextsCmdLn, Chars, Convert := extConvert, Err := extErr;

CONST
  TAB = 9X;
  LF = 10X;
  CR = 13X;
  SPACE = 20X;
  TILDE = "~";
    
VAR
  tabs : ARRAY 128 OF CHAR; 

(* Usage displays a help screen *)
PROCEDURE Usage();
BEGIN
  Out.String("USAGE OCat [OPTION] FILENAME [[OPTION] FILENAME ...]"); Out.Ln();
  Out.Ln();
  Out.String("Read Oberon Texts and write them to standard out");Out.Ln();
  Out.Ln();
  Out.String("OPTIONS"); Out.Ln();
  Out.Ln();
  Out.String(" -h, --help"); Out.Char(Chars.TAB); Out.String("this help document"); Out.Ln();Out.Ln();
  Out.String(" -t, --tabs"); Out.Char(Chars.TAB); Out.String("Allow tab characters"); Out.Ln();
  Out.String(" --spaces"); Out.Char(Chars.TAB); Out.String("Convert tab characters to four spaces"); Out.Ln();
  Out.String(" --spaces=X"); Out.Char(Chars.TAB); Out.String("Convert tab characters to X number of spaces"); Out.Ln();
  Out.Ln();
END Usage;

(* Convert Oberon texts to POSIX friendly standard out *)
PROCEDURE Cat(filename : ARRAY OF CHAR);
  VAR T : Texts.Text; R : Texts.Reader; ch : CHAR; skipLF : BOOLEAN;
BEGIN 
  IF Files.Old(filename) # NIL THEN
    Texts.Open(T, filename);
    Texts.OpenReader(R, T, 0); 
    (* FIXME: Need to handle case where this is an Oberon file
       and skip beyond the font settings to start of Text *)
    Texts.Read(R, ch);
    WHILE ~ R.eot DO
      IF (ch >= SPACE) & (ch <= TILDE) THEN 
        Out.Char(ch);
        skipLF := FALSE;
      ELSIF ch = TAB THEN 
        Out.String(tabs);
        skipLF := FALSE;
      ELSIF ch = LF THEN 
        IF skipLF = TRUE THEN
          skipLF := FALSE;
        ELSE  
          Out.Ln(); 
        END;
      ELSIF ch = CR THEN 
        Out.Ln(); 
        skipLF := TRUE;
      END;
      Texts.Read(R, ch);
    END;
    Out.Ln();
  ELSE
    Err.String("Can't open ");Err.String(filename);Err.Ln();
  END;
END Cat;

(* Apply process POSIX command line parameters and envoke Cat.*)
PROCEDURE Apply();
  VAR i, j, k, res : INTEGER; arg : ARRAY 1024 OF CHAR; ok : BOOLEAN;
BEGIN
  IF Args.count = 0 THEN
    Out.String("Try OCat --help for explanation of how this works"); Out.Ln();
  ELSE
    i := 0;
    WHILE i < Args.count DO
      Args.Get(i, arg, res);
      IF Chars.Equal("-h", arg) OR Chars.Equal("--help", arg) THEN
        Usage();
      ELSIF Chars.Equal("-t", arg) OR Chars.StartsWith("--tab", arg) THEN
        tabs[0] := Chars.TAB; tabs[1] := 0X;
      ELSIF Chars.StartsWith("--spaces=", arg) THEN
        Chars.TrimPrefix("--spaces=", arg);
        Convert.StringToInt(arg, k, ok);
        Chars.Clear(tabs);
        j := 0;
        WHILE j < k DO tabs[j] := " "; INC(j) END;
        tabs[j] := 0X; (* Terminate the tabs array of char *)
      ELSIF Chars.Equal("--spaces", arg) THEN
        Chars.Clear(tabs);
        tabs := "    ";
      ELSE
        Cat(arg);
      END;
      INC(i);
    END;
  END;
END Apply;

BEGIN tabs[0] := Chars.TAB; tabs[1] := 0X; Apply();
END ocat.

The POSIX command line version is built with

  obnc -o ocat ocat.Mod

