/*GENERATED BY OBNC 0.17.2*/

#ifndef artSocket_h
#define artSocket_h

#include <stdint.h>
#include <obnc/OBNC.h>

#define artSocket__Ok_ 0

#define artSocket__WouldBlock_ 1

#define artSocket__InProgress_ 2

#define artSocket__Interrupted_ 3

#define artSocket__NotConnected_ 4

#define artSocket__AlreadyConnected_ 5

#define artSocket__ConnectionRefused_ 6

#define artSocket__TimedOut_ 7

#define artSocket__HostUnreachable_ 8

#define artSocket__NetworkUnreachable_ 9

#define artSocket__AddrInUse_ 10

#define artSocket__AddrNotAvailable_ 11

#define artSocket__Closed_ 12

#define artSocket__UnknownError_ 99

typedef struct artSocket__SocketDesc_ *artSocket__Socket_;

typedef struct artSocket__SocketDesc_ {
	OBNC_INTEGER handle_;
	OBNC_INTEGER lastError_;
} artSocket__SocketDesc_;

struct artSocket__SocketDesc_Heap {
	const OBNC_Td *td;
	struct artSocket__SocketDesc_ fields;
};

#define artSocket__SocketDesc_id obnc__artSocket__SocketDesc_id
extern const int artSocket__SocketDesc_id;

#define artSocket__SocketDesc_ids obnc__artSocket__SocketDesc_ids
extern const int *const artSocket__SocketDesc_ids[1];

#define artSocket__SocketDesc_td obnc__artSocket__SocketDesc_td
extern const OBNC_Td artSocket__SocketDesc_td;

typedef struct artSocket__AddrInfoDesc_ *artSocket__AddrInfo_;

typedef struct artSocket__AddrInfoDesc_ {
	uintptr_t addrPtr_;
} artSocket__AddrInfoDesc_;

struct artSocket__AddrInfoDesc_Heap {
	const OBNC_Td *td;
	struct artSocket__AddrInfoDesc_ fields;
};

#define artSocket__AddrInfoDesc_id obnc__artSocket__AddrInfoDesc_id
extern const int artSocket__AddrInfoDesc_id;

#define artSocket__AddrInfoDesc_ids obnc__artSocket__AddrInfoDesc_ids
extern const int *const artSocket__AddrInfoDesc_ids[1];

#define artSocket__AddrInfoDesc_td obnc__artSocket__AddrInfoDesc_td
extern const OBNC_Td artSocket__AddrInfoDesc_td;

#define artSocket__NewSocket_ obnc__artSocket__NewSocket_
artSocket__Socket_ artSocket__NewSocket_(void);

#define artSocket__Bind_ obnc__artSocket__Bind_
OBNC_INTEGER artSocket__Bind_(artSocket__Socket_ s_, const char address_[], OBNC_INTEGER address_len, OBNC_INTEGER port_);

#define artSocket__Listen_ obnc__artSocket__Listen_
OBNC_INTEGER artSocket__Listen_(artSocket__Socket_ s_, OBNC_INTEGER backlog_);

#define artSocket__Accept_ obnc__artSocket__Accept_
artSocket__Socket_ artSocket__Accept_(artSocket__Socket_ s_, OBNC_INTEGER *err_);

#define artSocket__Connect_ obnc__artSocket__Connect_
OBNC_INTEGER artSocket__Connect_(artSocket__Socket_ s_, const char address_[], OBNC_INTEGER address_len, OBNC_INTEGER port_);

#define artSocket__Send_ obnc__artSocket__Send_
OBNC_INTEGER artSocket__Send_(artSocket__Socket_ s_, const char data_[], OBNC_INTEGER data_len, OBNC_INTEGER len_, OBNC_INTEGER *sent_);

#define artSocket__Receive_ obnc__artSocket__Receive_
OBNC_INTEGER artSocket__Receive_(artSocket__Socket_ s_, char data_[], OBNC_INTEGER data_len, OBNC_INTEGER maxLen_, OBNC_INTEGER *received_);

#define artSocket__Close_ obnc__artSocket__Close_
void artSocket__Close_(artSocket__Socket_ s_);

#define artSocket__GetAddrInfo_ obnc__artSocket__GetAddrInfo_
artSocket__AddrInfo_ artSocket__GetAddrInfo_(const char host_[], OBNC_INTEGER host_len, OBNC_INTEGER port_);

#define artSocket__FreeAddrInfo_ obnc__artSocket__FreeAddrInfo_
void artSocket__FreeAddrInfo_(artSocket__AddrInfo_ ai_);

#define artSocket__LastError_ obnc__artSocket__LastError_
OBNC_INTEGER artSocket__LastError_(artSocket__Socket_ s_);

#define artSocket__Init obnc__artSocket__Init
void artSocket__Init(void);

#endif
