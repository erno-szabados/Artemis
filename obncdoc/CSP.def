(*
    CSP.Mod - Communicating Sequential Processes implementation
    
    A minimal CSP implementation following Hoare's model with channels and processes.
    Built on Artemis Collections for portability.
    
    Copyright (C) 2025
    Released under The 3-Clause BSD License.
*)
DEFINITION CSP;

IMPORT Collections;

CONST
    (* Channel states *)
    OPEN = 0;
    CLOSED = 1;

    (* Process states *)
    READY = 0;
    RUNNING = 1;
    BLOCKED = 2;
    FINISHED = 3;

TYPE
    (* Opaque channel type for message passing *)
    Channel = POINTER TO ChannelDesc;

    (* Process procedure type *)
    ProcessProc = PROCEDURE;

    (* Opaque process type *)
    Process = POINTER TO ProcessDesc;

    (* Waiter for blocking operations *)
    Waiter = POINTER TO WaiterDesc;

    (* Simple scheduler *)
    Scheduler = POINTER TO SchedulerDesc;

(* Create a new channel with given capacity (0 = synchronous) *)
PROCEDURE NewChannel(capacity: INTEGER): Channel;

(* Free a channel and its resources *)
PROCEDURE FreeChannel(VAR ch: Channel);

(* Close a channel (no more sends allowed) *)
PROCEDURE CloseChannel(ch: Channel);

(* Check if channel is closed *)
PROCEDURE IsClosed(ch: Channel): BOOLEAN;

(* Non-blocking send - returns TRUE if sent, FALSE if would block *)
PROCEDURE TrySend(ch: Channel; item: Collections.ItemPtr): BOOLEAN;

(* Non-blocking receive - returns TRUE if received, FALSE if would block *)
PROCEDURE TryReceive(ch: Channel; VAR item: Collections.ItemPtr): BOOLEAN;

(* Blocking send (simplified - would need scheduler integration) *)
PROCEDURE Send(ch: Channel; item: Collections.ItemPtr);

(* Blocking receive (simplified - would need scheduler integration) *)
PROCEDURE Receive(ch: Channel; VAR item: Collections.ItemPtr);

(* Create a new process *)
PROCEDURE NewProcess(proc: ProcessProc): Process;

(* Create a new scheduler *)
PROCEDURE NewScheduler(): Scheduler;

(* Add a process to scheduler *)
PROCEDURE AddProcess(sched: Scheduler; proc: Process);

(* Wait for a process to finish. Returns TRUE if successful, FALSE otherwise. *)
PROCEDURE JoinProcess(proc: Process): BOOLEAN;

(* Simple cooperative yield *)
PROCEDURE Yield();

(* Run the scheduler (simplified) *)
PROCEDURE Run(sched: Scheduler);

(* Initialize default scheduler *)
PROCEDURE Init();

(* Get default scheduler *)
PROCEDURE DefaultScheduler(): Scheduler;

END CSP.
