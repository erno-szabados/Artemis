(*
  HttpHeader - HTTP header parsing and manipulation module

  Copyright (C) 2025 Artemis Project Contributors

  Released under The 3-Clause BSD License.

  This module provides functionality to parse, store, manipulate, and serialize HTTP headers.
  It uses the DStrings module for string handling and the Dictionary module for key-value storage.
  Header field names are handled case-insensitively by normalizing to uppercase.
*)
DEFINITION HttpHeader;

IMPORT DStrings, Dictionary;

CONST
  (* Maximum length for header keys *)
  MaxKeyLength = 256; 

TYPE
  Header = POINTER TO HeaderDesc;

(*
  Initializes a new, empty HTTP header structure.
*)
PROCEDURE Init(VAR h: Header);

(**
  Serializes the header fields into a string suitable for sending over HTTP.
  Returns TRUE on success.
*)
PROCEDURE ToString(h: Header; VAR out: DStrings.String): BOOLEAN;

(*
  Retrieves the value for a given header key (case-insensitive). Returns TRUE if found.
*)
PROCEDURE Get(h: Header; key: ARRAY OF CHAR; VAR value: DStrings.String): BOOLEAN;

(*
  Sets or updates a header field (case-insensitive). Returns TRUE on success.
*)
PROCEDURE Set(h: Header; key, value: ARRAY OF CHAR): BOOLEAN;

(*
  Removes a header field (case-insensitive). Returns TRUE if removed.
*)
PROCEDURE Remove(h: Header; key: ARRAY OF CHAR): BOOLEAN;

(*
  Parses raw HTTP header text into the header structure. Returns TRUE on success.
  Handles line splitting, key/value separation, whitespace trimming, and case normalization.
*)
PROCEDURE Parse(raw: ARRAY OF CHAR; VAR h: Header): BOOLEAN;

(*
  Iterates over all header fields, calling the provided visitor procedure.
*)
PROCEDURE Foreach(h: Header; visit: Dictionary.StringKeyVisitProc; VAR state: Dictionary.DictVisitorState);

END HttpHeader.
