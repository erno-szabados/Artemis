(*
    CSPThreads.Mod - Thread creation and management utilities for Oberon-07
    
    Provides:
    - Safe thread creation and management using PThreads
    - Memory-safe procedure registry for thread-to-C interface
    - Clean thread lifecycle management
    
    THREAD SAFETY ARCHITECTURE:
    
    This module uses a safe thread procedure registry to eliminate memory safety
    issues when passing Oberon procedure pointers to C pthread functions.
    
    Problem: pthread_create() expects a C function pointer, but we need to call
    Oberon procedures. The naive approach of casting procedure pointers to integers
    using SYSTEM.VAL() is unsafe and can cause crashes.
    
    Solution: Thread Procedure Registry
    - HashMap-based registry maps safe integer IDs to procedure pointers
    - ThreadTrampoline() uses the ID to safely lookup the actual procedure
    - Automatic cleanup when threads complete (both normal and joined)
    - Thread-safe operations protected by mutex
    - No arbitrary thread limits (grows dynamically with available memory)
    
    Flow:
    1. NewThread(proc) → RegisterThreadProc(proc) → returns safe integer ID
    2. pthread_create(ThreadTrampoline, ID) → creates OS thread with safe ID
    3. ThreadTrampoline(ID) → GetThreadProc(ID) → calls actual procedure
    4. Thread completion → UnregisterThreadProc(ID) → cleanup registry entry
    
    This approach provides complete memory safety while maintaining clean CSP semantics.
    
    Copyright (C) 2025
    Released under The 3-Clause BSD License.
    Author: Artemis Project
*)
DEFINITION CSPThreads;

TYPE
    (* Thread procedure signature *)
    ThreadProc = PROCEDURE;

    (* Thread handle for managing OS threads *)
    Thread = POINTER TO ThreadDesc;

(* Create and start a new thread *)
PROCEDURE NewThread(proc: ThreadProc): Thread;

(*
    Wait for thread to complete
    
    Note: We use a dual cleanup strategy for registry entries:
    1. Normal cleanup in ThreadTrampoline when thread completes normally
    2. Safety cleanup here in case the thread didn't complete normally
    This ensures no registry entries are leaked regardless of thread fate.
*)
PROCEDURE JoinThread(thread: Thread): BOOLEAN;

PROCEDURE Init();

END CSPThreads.
