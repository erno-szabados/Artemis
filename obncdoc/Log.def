(* Log.Mod - Basic logging module for Artemis

Copyright (C) 2025 Artemis Project

Released under The 3-Clause BSD License.
See https://opensource.org/licenses/BSD-3-Clause

This module provides basic logging functionality with multiple log levels,
support for console and file output, and timestamping capabilities.
*)
DEFINITION Log;

IMPORT DStrings;

CONST
  DEBUG = 0;
  INFO = 1; 
  WARNING = 2;
  ERROR = 3;

  CONSOLE = 0;
  FILE = 1;
  BOTH = 2;

TYPE
  Logger = POINTER TO LoggerDesc;

VAR
  defaultLogger: Logger;

(* Create a new logger with specified minimum level and destination *)
PROCEDURE New(level, destination: INTEGER; filename: ARRAY OF CHAR): Logger;

(* Set the minimum log level for the logger *)
PROCEDURE SetLevel(logger: Logger; level: INTEGER);

(* Get the current log level for the logger *)
PROCEDURE GetLevel(logger: Logger): INTEGER;

(* Enable or disable timestamping *)
PROCEDURE SetTimestamp(logger: Logger; enabled: BOOLEAN);

(* Get current timestamp setting *)
PROCEDURE GetTimestamp(logger: Logger): BOOLEAN;

(* Get the current destination setting *)
PROCEDURE GetDestination(logger: Logger): INTEGER;

(* Log a message with specified level using ARRAY OF CHAR *)
PROCEDURE LogMessage(logger: Logger; level: INTEGER; message: ARRAY OF CHAR);

(* Log a message with specified level using DString *)
PROCEDURE LogDString(logger: Logger; level: INTEGER; message: DStrings.String);

(* Convenience procedures for common log levels *)

(* Log a debug message *)
PROCEDURE Debug(logger: Logger; message: ARRAY OF CHAR);

(* Log an info message *)
PROCEDURE Info(logger: Logger; message: ARRAY OF CHAR);

(* Log a warning message *)
PROCEDURE Warning(logger: Logger; message: ARRAY OF CHAR);

(* Log an error message *)
PROCEDURE Error(logger: Logger; message: ARRAY OF CHAR);

(* Convenience procedures using the default logger *)

(* Log a debug message using default logger *)
PROCEDURE DebugDefault(message: ARRAY OF CHAR);

(* Log an info message using default logger *)
PROCEDURE InfoDefault(message: ARRAY OF CHAR);

(* Log a warning message using default logger *)
PROCEDURE WarningDefault(message: ARRAY OF CHAR);

(* Log an error message using default logger *)
PROCEDURE ErrorDefault(message: ARRAY OF CHAR);

(* Close the logger and flush any pending writes *)
PROCEDURE Close(logger: Logger);

END Log.
